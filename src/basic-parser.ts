// I used github copilot Claude4 Sonnet to help me write this file.
// I first tried Claude4 Sonnet website, but I realized I should use
// github copilot as the main tool(according to missive). I removed
// everything generated by Website Claude4 Sonnet and rewrite the code
// using github copilot.
// I prompt the copilot using my intentions and constraints in the documentation.
// I also add some constraints like multi function signature, minimal
// effort modification and do not change the other files.
// Then, I manually check the code and run existing tests to make sure
// everything compiles and works as expected.


import * as fs from "fs";
import * as readline from "readline";
import { z, ZodType } from "zod";

/**
 * This is a JSDoc comment. Similar to JavaDoc, it documents a public-facing
 * function for others to use. Most modern editors will show the comment when 
 * mousing over this function name. Try it in run-parser.ts!
 * 
 * File I/O in TypeScript is "asynchronous", meaning that we can't just
 * read the file and return its contents. You'll learn more about this 
 * in class. For now, just leave the "async" and "await" where they are. 
 * You shouldn't need to alter them.
 * 
 * @param path The path to the file being loaded.
 * @param schema Optional Zod schema for validation and transformation
 * @returns a "promise" to produce a 2-d array of cell values or typed objects
 */
export async function parseCSV<T>(path: string, schema: ZodType<T>): Promise<T[]>;
export async function parseCSV(path: string): Promise<string[][]>;
export async function parseCSV<T>(path: string, schema?: ZodType<T>): Promise<T[] | string[][]> {
  // This initial block of code reads from a file in Node.js. The "rl"
  // value can be iterated over in a "for" loop. 
  const fileStream = fs.createReadStream(path);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity, // handle different line endings
  });
  
  // Create an empty array to hold the results
  let result: any[] = []
  
  // We add the "await" here because file I/O is asynchronous. 
  // We need to force TypeScript to _wait_ for a row before moving on. 
  // More on this in class soon!
  let rowIndex = 0;
  for await (const line of rl) {
    rowIndex++;
    const values = line.split(",").map((v) => v.trim());
    
    if (schema) {
      // If schema is provided, validate and transform the row
      const parseResult = schema.safeParse(values);
      if (!parseResult.success) {
        throw new Error(`CSV validation failed at row ${rowIndex}: ${JSON.stringify(values)} - ${parseResult.error.message}`);
      }
      result.push(parseResult.data);
    } else {
      // Fall back to previous behavior
      result.push(values);
    }
  }
  return result;
}